name: Main
on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name : Install Dependencies
        run : npm install --ignore-scripts
      - name : Bootstrap Dependencies
        run : npx lerna bootstrap --no-ci
      - name : Run Tests
        run : npm run test
        env:
          CI: true

  publish_and_test_app:
    name: Build and test sample app
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name : Checkout Repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layer
        uses: actions/cache@v2
        with:
            path: /tmp/.buildx-cache
            key: ${{ runner.os }}-buildx-${{ github.sha }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build image
        run : docker build --tag "611364707713.dkr.ecr.us-west-2.amazonaws.com/amazon/aws-otel-js-sample-app:${{ github.sha }}" --file sample-apps/Dockerfile .
      - name: Push to ECR
        run : docker push "611364707713.dkr.ecr.us-west-2.amazonaws.com/amazon/aws-otel-js-sample-app:${{ github.sha }}"
      - name: Setup and Run Otel collector
        run: |
          docker-compose -f .github/collector/docker-compose.yml up &
        env:
          ACCESS_KEY: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}

      - name: Run Http App with Instrumentation
        run: |
          docker run -e AWS_ACCESS_KEY_ID=${{ secrets.INTEG_TEST_AWS_KEY_ID }} \
                     -e AWS_SECRET_ACCESS_KEY=${{ secrets.INTEG_TEST_AWS_KEY_SECRET }} \
                     -e AWS_REGION=us-west-2 \
                     -e INSTANCE_ID=${{ github.run_id }}-${{ github.run_number }} \
                     -e LISTEN_ADDRESS=0.0.0.0:8080 \
                     -e OTEL_EXPORTER_OTLP_ENDPOINT=172.17.0.1:55680 \
                     -e OTEL_RESOURCE_ATTRIBUTES="service.name=aws-otel-integ-test" \
                     -e OTEL_EXPORTER_OTLP_INSECURE=True \
                     -p 8080:8080 611364707713.dkr.ecr.us-west-2.amazonaws.com/amazon/aws-otel-js-sample-app:${{ github.sha }} &
      
      - name: Directory to checkout test framework
        run: mkdir test-framework 

      - name: Checkout test framework
        uses: actions/checkout@v2
        with:
          repository: aws-observability/aws-otel-test-framework
          ref: terraform
          path: test-framework

      - name: Run testing suite
        run: ./gradlew :validator:run --args='-c js-otel-trace-metric-validation.yml --endpoint http://127.0.0.1:8080 --metric-namespace aws-otel-integ-test -t ${{ github.run_id }}-${{ github.run_number }}'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          AWS_REGION: us-west-2
        working-directory: test-framework
